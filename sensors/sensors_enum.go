// Code generated by go-enum DO NOT EDIT.

package sensors

import (
	"fmt"
)

const (
	// Invalid is a Type of type Invalid.
	Invalid Type = iota
	// Temperature is a Type of type Temperature.
	// Temperatures of mainboard sensors, external fan controllers and AIOs
	Temperature
	// SyntheticTemperature is a Type of type SyntheticTemperature.
	// User defined synthetic temperature (mean, max, average, difference, etc..)
	SyntheticTemperature
	// FanSpeedRPM is a Type of type FanSpeedRPM.
	// Fan speed of fans attached to mainboard channels, AIOs, external fan controllers and also pump speeds of AIOs
	FanSpeedRPM
	// FanControlValue is a Type of type FanControlValue.
	// If any fan or pump is controlled by Argus Monitor then the control value can be read from this
	FanControlValue
	// NetworkSpeed is a Type of type NetworkSpeed.
	// Up/down speeds of network adapters if selected to be monitored inside Argus Monitor
	NetworkSpeed
	// CPUTemperature is a Type of type CPUTemperature.
	// The normal CPU temperature readings per core for Intel and the only one available for AMD
	CPUTemperature
	// CPUTemperatureAdditional is a Type of type CPUTemperatureAdditional.
	// Additional temperatures provided by the CPU like CCDx temperatures of AMD CPUs
	CPUTemperatureAdditional
	// CPUMultiplier is a Type of type CPUMultiplier.
	// Multiplier value for every core
	CPUMultiplier
	// CPUFrequencyFSB is a Type of type CPUFrequencyFSB.
	// Core frequencies can be calculated by multiplying FSB frequency by the multipliers
	CPUFrequencyFSB
	// GPUTemperature is a Type of type GPUTemperature.
	GPUTemperature
	// GPUName is a Type of type GPUName.
	// The name of the GPU (e.g. "Nvidia RTX3080")
	GPUName
	// GPULoad is a Type of type GPULoad.
	GPULoad
	// GPUCoreClock is a Type of type GPUCoreClock.
	GPUCoreClock
	// GPUMemoryClock is a Type of type GPUMemoryClock.
	GPUMemoryClock
	// GPUShaderClock is a Type of type GPUShaderClock.
	GPUShaderClock
	// GPUFanSpeedPercent is a Type of type GPUFanSpeedPercent.
	GPUFanSpeedPercent
	// GPUFanSpeedRPM is a Type of type GPUFanSpeedRPM.
	GPUFanSpeedRPM
	// GPUMemoryUsedPercent is a Type of type GPUMemoryUsedPercent.
	GPUMemoryUsedPercent
	// GPUMemoryUsedMB is a Type of type GPUMemoryUsedMB.
	GPUMemoryUsedMB
	// GPUPower is a Type of type GPUPower.
	GPUPower
	// DiskTemperature is a Type of type DiskTemperature.
	DiskTemperature
	// DiskTransferRate is a Type of type DiskTransferRate.
	DiskTransferRate
	// CPULoad is a Type of type CPULoad.
	CPULoad
	// RAMUsage is a Type of type RAMUsage.
	RAMUsage
	// Battery is a Type of type Battery.
	Battery
	// Length is a Type of type Length.
	// The number of valid sensors. Is not a sensor itself
	Length
)

const _TypeName = "InvalidTemperatureSyntheticTemperatureFanSpeedRPMFanControlValueNetworkSpeedCPUTemperatureCPUTemperatureAdditionalCPUMultiplierCPUFrequencyFSBGPUTemperatureGPUNameGPULoadGPUCoreClockGPUMemoryClockGPUShaderClockGPUFanSpeedPercentGPUFanSpeedRPMGPUMemoryUsedPercentGPUMemoryUsedMBGPUPowerDiskTemperatureDiskTransferRateCPULoadRAMUsageBatteryLength"

var _TypeMap = map[Type]string{
	0:  _TypeName[0:7],
	1:  _TypeName[7:18],
	2:  _TypeName[18:38],
	3:  _TypeName[38:49],
	4:  _TypeName[49:64],
	5:  _TypeName[64:76],
	6:  _TypeName[76:90],
	7:  _TypeName[90:114],
	8:  _TypeName[114:127],
	9:  _TypeName[127:142],
	10: _TypeName[142:156],
	11: _TypeName[156:163],
	12: _TypeName[163:170],
	13: _TypeName[170:182],
	14: _TypeName[182:196],
	15: _TypeName[196:210],
	16: _TypeName[210:228],
	17: _TypeName[228:242],
	18: _TypeName[242:262],
	19: _TypeName[262:277],
	20: _TypeName[277:285],
	21: _TypeName[285:300],
	22: _TypeName[300:316],
	23: _TypeName[316:323],
	24: _TypeName[323:331],
	25: _TypeName[331:338],
	26: _TypeName[338:344],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Measurements(%d)", x)
}

var _TypeValue = map[string]Type{
	_TypeName[0:7]:     0,
	_TypeName[7:18]:    1,
	_TypeName[18:38]:   2,
	_TypeName[38:49]:   3,
	_TypeName[49:64]:   4,
	_TypeName[64:76]:   5,
	_TypeName[76:90]:   6,
	_TypeName[90:114]:  7,
	_TypeName[114:127]: 8,
	_TypeName[127:142]: 9,
	_TypeName[142:156]: 10,
	_TypeName[156:163]: 11,
	_TypeName[163:170]: 12,
	_TypeName[170:182]: 13,
	_TypeName[182:196]: 14,
	_TypeName[196:210]: 15,
	_TypeName[210:228]: 16,
	_TypeName[228:242]: 17,
	_TypeName[242:262]: 18,
	_TypeName[262:277]: 19,
	_TypeName[277:285]: 20,
	_TypeName[285:300]: 21,
	_TypeName[300:316]: 22,
	_TypeName[316:323]: 23,
	_TypeName[323:331]: 24,
	_TypeName[331:338]: 25,
	_TypeName[338:344]: 26,
}

// ParseType attempts to convert a string to a Type
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is not a valid Measurements", name)
}
